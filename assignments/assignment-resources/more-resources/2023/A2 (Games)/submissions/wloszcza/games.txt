The most significant thing that I learned from this assignment was how the Alpha-Beta pruning algorithm is designed and how itâ€™s able to search for a move significantly faster than the basic Minimax algorithm can. In comparison, a tree with a large enough depth to make Minimax take a few minutes to finish would only take a few seconds for the Alpha-Beta pruning algorithm. I also learned about caching somewhat in this assignment although I ran into issues relating to caching. Caching is useful for speeding up the search for some search trees, but a wrong implementation had caused some values in the tree to end up different from what was expected and it took a while to figure out what might make sense as a key to represent a board state in the cache. While making the Minimax and Alpha-Beta pruning algorithms I had thought about the different ways I might implement it in terms of helper functions. I ended up using one helper functions that does both min and max in alternation rather than having separate functions for each. This made it easier for me to keep code in one place since the code for min and max are similar apart from which value is chosen. It was interesting to learn how the Alpha-Beta pruning algorithm could speed Minimax up so much and make it much more feasible as a search algorithm by pruning all the values it knows will not make a difference.