from bnetbase import Variable, Factor, BN
import csv, itertools

def multiply_factors(Factors):
    '''Factors is a list of factor objects.
    Return a new factor that is the product of the factors in Factors.
    @return a factor''' 
    ### YOUR CODE HERE ###
    cur_scope = []
    for f in Factors:
        for var in f.get_scope():
            if var not in cur_scope:
                cur_scope.append(var)
    result_factor = Factor("result", cur_scope)
    multiply_help(cur_scope,result_factor,Factors)
    return result_factor
def multiply_help(scope, new_factor, all_factors):
    if len(scope)>0:
        cur_var = scope[0]
        for assignment in cur_var.domain():
            scope[0].set_assignment(assignment)
            multiply_help(scope[1::], new_factor,all_factors)
    else:
        result=1
        for f in all_factors:
            result*=f.get_value_at_current_assignments()
        new_factor.add_value_at_current_assignment(result)


def restrict_factor(f, var, value):
    '''f is a factor, var is a Variable, and value is a value from var.domain.
    Return a new factor that is the restriction of f by this var = value.
    Don't change f! If f has only one variable its restriction yields a
    constant factor.
    @return a factor'''
    cur_scope = []
    assignments = []
    for v in f.get_scope():
        if v!= var:
            cur_scope.append(v)
    result_factor = Factor("temp", cur_scope)

    var.set_assignment(value)
    while len(cur_scope) > 0:
        val = cur_scope[0].domain()[0]
        cur_scope[0].set_assignment(val)
        cur_scope = cur_scope[1:]
    assignments.append(f.get_value_at_current_assignments())

    result_factor.values = assignments
    return result_factor


    ### YOUR CODE HERE ###
    # cur_scope = []
    # for v in f.get_scope():
    #     if v!= var:
    #         cur_scope.append(v)
    # result_factor = Factor("temp", cur_scope)
    # var_index = f.get_scope().index(var)
    # assignments = []
    # for i in range(len(f.get_scope())):
    #     cur_var = f.scope[i]
    #     for j in range(cur_var.domain_size()):
    #         assignments.append(cur_var.dom[j])
    # assignment = []
    # for i in range(len(f.values)):
    #     for var in f.get_scope():
    #         assignment.append(var.get_assignment())
    #     if assignment[f.get_scope().index(var)] == value:
    #         for j in range(len(result_factor.get_scope())):
    #             cur_var = result_factor.get_scope()[j]
    #             print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
    #             print(assignment)
    #             if cur_var in assignment:
    #                 index = assignment.index(cur_var)
    #                 cur_var.setassignment(assignment[index])
    #             else:
    #                 continue
    #         result_factor.add_value_at_current_assignment(f.values[i])
    # return result_factor
        



def sum_out_variable(f, var):
    '''f is a factor, var is a Variable.
    Return a new factor that is the result of summing var out of f, by summing
    the function generated by the product over all values of var.
    @return a factor'''       
    ### YOUR CODE HERE ###
    cur_scope = [v for v in f.get_scope() if v != var]
    new_factor = Factor("temp", cur_scope)
    
    assignments = [v.domain() for v in cur_scope]
    for assignment in itertools.product(*assignments):
        for i, var_i in enumerate(cur_scope):
            var_i.set_assignment(assignment[i])
        total = 0
        for assignment in var.domain():
            var.set_assignment(assignment)
            total += f.get_value_at_current_assignments()
        new_factor.add_value_at_current_assignment(total)
    return new_factor
def normalize(nums):
    '''num is a list of numbers. Return a new list of numbers where the new
    numbers sum to 1, i.e., normalize the input numbers.
    @return a normalized list of numbers'''
    ### YOUR CODE HERE ###
    total = sum(nums)
    return [num/total for num in nums]




def min_fill_ordering(Factors, QueryVar):
    '''Factors is a list of factor objects, QueryVar is a query variable.
    Compute an elimination order given list of factors using the min fill heuristic. 
    Variables in the list will be derived from the scopes of the factors in Factors. 
    Order the list such that the first variable in the list generates the smallest
    factor upon elimination. The QueryVar must NOT part of the returned ordering list.
    @return a list of variables''' 
    ### YOUR CODE HERE ###
    remaining_vars = set([var for factor in Factors for var in factor.get_scope()]) - {QueryVar}
    ordered_vars = []

    while remaining_vars:
        min_var = None
        min_edges = float('inf')

        for var in remaining_vars:
            edges = 0
            for factor in Factors:
                if var in factor.get_scope():
                    edges += len(set(factor.get_scope()) & remaining_vars) - 1
            if edges < min_edges:
                min_var = var
                min_edges = edges
        ordered_vars.append(min_var)
        remaining_vars.remove(min_var)
    return ordered_vars


def VE(Net, QueryVar, EvidenceVars):
    
    """
    Input: Net---a BN object (a Bayes Net)
           QueryVar---a Variable object (the variable whose distribution
                      we want to compute)
           EvidenceVars---a LIST of Variable objects. Each of these
                          variables has had its evidence set to a particular
                          value from its domain using set_evidence.
     VE returns a distribution over the values of QueryVar, i.e., a list
     of numbers, one for every value in QueryVar's domain. These numbers
     sum to one, and the i'th number is the probability that QueryVar is
     equal to its i'th value given the setting of the evidence
     variables. For example if QueryVar = A with Dom[A] = ['a', 'b',
     'c'], EvidenceVars = [B, C], and we have previously called
     B.set_evidence(1) and C.set_evidence('c'), then VE would return a
     list of three numbers. E.g. [0.5, 0.24, 0.26]. These numbers would
     mean that Pr(A='a'|B=1, C='c') = 0.5 Pr(A='a'|B=1, C='c') = 0.24
     Pr(A='a'|B=1, C='c') = 0.26
     @return a list of probabilities, one for each item in the domain of the QueryVar
     """
    ### YOUR CODE HERE ###


def NaiveBayesModel():
    '''
   NaiveBayesModel returns a BN that is a Naive Bayes model that 
   represents the joint distribution of value assignments to 
   variables in the Adult Dataset from UCI.  Remember a Naive Bayes model
   assumes P(X1, X2,.... XN, Class) can be represented as 
   P(X1|Class)*P(X2|Class)* .... *P(XN|Class)*P(Class).
   When you generated your Bayes Net, assume that the values 
   in the SALARY column of the dataset are the CLASS that we want to predict.
   @return a BN that is a Naive Bayes model and which represents the Adult Dataset. 
    '''
    ### READ IN THE DATA
    input_data = []
    with open('data/adult-dataset.csv', newline='') as csvfile:
        reader = csv.reader(csvfile)
        headers = next(reader, None) #skip header row
        for row in reader:
            input_data.append(row)

    ### DOMAIN INFORMATION REFLECTS ORDER OF COLUMNS IN THE DATA SET
    variable_domains = {
    "Work": ['Not Working', 'Government', 'Private', 'Self-emp'],
    "Education": ['<Gr12', 'HS-Graduate', 'Associate', 'Professional', 'Bachelors', 'Masters', 'Doctorate'],    
    "Occupation": ['Admin', 'Military', 'Manual Labour', 'Office Labour', 'Service', 'Professional'],    
    "MaritalStatus": ['Not-Married', 'Married', 'Separated', 'Widowed'],
    "Relationship": ['Wife', 'Own-child', 'Husband', 'Not-in-family', 'Other-relative', 'Unmarried'],
    "Race": ['White', 'Black', 'Asian-Pac-Islander', 'Amer-Indian-Eskimo', 'Other'],
    "Gender": ['Male', 'Female'],
    "Country": ['North-America', 'South-America', 'Europe', 'Asia', 'Middle-East', 'Carribean'],
    "Salary": ['<50K', '>=50K']
    }
    ### YOUR CODE HERE ###
    variables = {name: Variable(name, domain) for name, domain in variable_domains.items()}   
    factors = {}
    for var_name, var in variables.items():
        if var_name != "Salary":
            factors[var_name] = Factor(var_name + "-given-Salary", [var, variables["Salary"]])
            for value in var.domain():
                for income in variables["Salary"].domain():
                    factors[var_name].add_value_at_current_assignment(1)
    for row in input_data:
        income = row[-1]
        variables["Salary"].set_assignment(income)
        for i, value in enumerate(row[:-1]):
            var_name = headers[i]
            if var_name != "Salary":
                variables[var_name].set_assignment(value)
                factors[var_name].add_value_at_current_assignment(factors[var_name].get_value_at_current_assignments() + 1)

    for factor in factors.values():
        variable = factor.scope[0]
        for income in variables["Salary"].domain():
            variables["Salary"].set_assignment(income)
            values = [factor.get_value([val, income]) for val in variable.domain()]
            normalized_values = normalize(values)
            for val, norm_val in zip(variable.domain(), normalized_values):
                variable.set_assignment(val)
                factor.add_value_at_current_assignment(norm_val)

    return BN("Adult Income", variables.values(), factors.values())




def Explore(Net, question):
    '''    Input: Net---a BN object (a Bayes Net)
           question---an integer indicating the question in HW4 to be calculated. Options are:
           1. What percentage of the women in the data set end up with a P(S=">=$50K"|E1) that is strictly greater than P(S=">=$50K"|E2)?
           2. What percentage of the men in the data set end up with a P(S=">=$50K"|E1) that is strictly greater than P(S=">=$50K"|E2)?
           3. What percentage of the women in the data set with P(S=">=$50K"|E1) > 0.5 actually have a salary over $50K?
           4. What percentage of the men in the data set with P(S=">=$50K"|E1) > 0.5 actually have a salary over $50K?
           5. What percentage of the women in the data set are assigned a P(Salary=">=$50K"|E1) > 0.5, overall?
           6. What percentage of the men in the data set are assigned a P(Salary=">=$50K"|E1) > 0.5, overall?
           @return a percentage (between 0 and 100)
    ''' 
    ### YOUR CODE HERE ###

