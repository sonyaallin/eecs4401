import itertools
import math

import numpy

from bnetbase import Variable, Factor, BN
import csv

def multiply_factors(Factors):
    '''Factors is a list of factor objects.
    Return a new factor that is the product of the factors in Factors.
    @return a factor''' 
    ### YOUR CODE HERE ###
    list_of_vars = []
    #factor_assignments = []
    fa_dict = {}

    for factor in Factors:
        s = factor.get_scope()
        for var in s:
            list_of_vars.append(var)

    list_of_vars = list(dict.fromkeys(list_of_vars)) # Gets all the variables of all the factors except duplicates

    #print(list_of_vars)
    all_possible_assignments = []
    for var in list_of_vars:
        all_possible_assignments.append(var.domain())
    all_possible_assignments = list(itertools.product(*all_possible_assignments))
    #[list(i) for i in all_possible_assignments]
    #print(all_possible_assignments)

    for combo in all_possible_assignments: # Create the dict for all possible assignment of values for new factor
        fa_dict[combo] = 1
    #print(fa_dict)

    for factor in Factors:
        fd = []
        fd_d = {}
        for var in factor.get_scope():
            fd.append(var.domain())
        fd = list(itertools.product(*fd))
        #fd = [list(i) for i in fd]

        for f in fd:
            #print(list(f))
            fd_d[f] = factor.get_value(list(f))
        #print(fd)
        #print(fd_d)

        for combo in fd_d:
            for c in fa_dict:
                if set(combo).issubset(c):
                    fa_dict[c] = fa_dict[c] * fd_d[combo]

    # CONVERT DICTIONARY TO LIST, THEN TAKE VALUES FROM TUPLES AND INSERT DIRECTLY INTO LIST
    list_fa_dict = [list(i) for i in list(fa_dict.items())]

    temp = []
    for x in list_fa_dict:
        temp.append(x.pop(0))

    temp = [list(i) for i in temp]

    list_fa_dict = [temp[i] + list_fa_dict[i] for i in range(len(list_fa_dict))]
    # print(list_fa_dict)

    # TIME TO ASSEMBLE THE NEW FACTOR
    new_factor = Factor("new", list_of_vars)
    new_factor.add_values(list_fa_dict)

    return new_factor

def restrict_factor(f, var, value):
    '''f is a factor, var is a Variable, and value is a value from var.domain.
    Return a new factor that is the restriction of f by this var = value.
    Don't change f! If f has only one variable its restriction yields a
    constant factor.
    @return a factor''' 
    ### YOUR CODE HERE ###
    #print(var)
    list_of_vars = []
    for v in f.get_scope():
        list_of_vars.append(v.domain())

    val_combos = list(itertools.product(*list_of_vars))

    val_combos = [list(i) for i in val_combos]

    combos_without_val = []
    for i in range(len(val_combos)):
        if value in val_combos[i]:
            combos_without_val.append(val_combos[i])

    val_combo_assignments = []
    for v in combos_without_val:
        val_combo_assignments.append(f.get_value(v))

    # Now create a new list of values of variables with a value assigned to this order
    new_vals = []
    for i in range(len(combos_without_val)):
        new_vals.append(combos_without_val[i] + [val_combo_assignments[i]])

    # Remove the value given as the parameter from these value sequences
    for a in new_vals:
        a.remove(value)

    # Include all variables in the original factor scope except the variable specified.
    new_scope = f.get_scope()
    new_scope.remove(var)

    new_factor = Factor('new', new_scope)
    new_factor.add_values(new_vals)
    return new_factor


def sum_out_variable(f, var):
    '''f is a factor, var is a Variable.
    Return a new factor that is the result of summing var out of f, by summing
    the function generated by the product over all values of var.
    @return a factor'''       
    ### YOUR CODE HERE ###

    #GET THE NEW SCOPE (SCOPE WITHOUT SPECIFIED VAR)
    new_scope = f.get_scope()
    new_scope.remove(var)

    list_of_vars = []
    for v in f.get_scope():
        list_of_vars.append(v.domain())

    val_combos = list(itertools.product(*list_of_vars))

    val_combos = [list(i) for i in val_combos]

    for v in val_combos:
        v.append(f.get_value(v))

    #print(val_combos)

    for combo in val_combos:
        for val in combo:
            if val in var.domain():
                combo.remove(val)

    val_dict = {}
    for c in val_combos:
        k = tuple(c[:-1])
        if k in val_dict:
            val_dict[k] += c[-1]
        else:
            val_dict[k] = c[-1]
    #print(val_dict)

    # CONVERT DICTIONARY TO LIST, AND TAKE VALUES OUT THE TUPLES AND PUT DIRECTLY INTO LIST
    list_val_dict = [list(i) for i in list(val_dict.items())]

    temp = []
    for x in list_val_dict:
        temp.append(x.pop(0))

    temp = [list(i) for i in temp]

    list_val_dict = [temp[i] + list_val_dict[i] for i in range(len(list_val_dict))]

    # TIME TO ASSEMBLE THE FACTOR
    new_factor = Factor('new', new_scope)
    new_factor.add_values(list_val_dict)
    return new_factor

def normalize(nums):
    '''num is a list of numbers. Return a new list of numbers where the new
    numbers sum to 1, i.e., normalize the input numbers.
    @return a normalized list of numbers'''
    ### YOUR CODE HERE ###
    temp = nums
    norm_nums = []
    if len(set(nums)) == 1 and nums[0] == 0:
        for i in range(len(temp)):
            temp[i] = 1/len(temp)
    for n in temp:
        norm_nums.append(n/sum(temp))
    return norm_nums

def min_fill_ordering(Factors, QueryVar):
    '''Factors is a list of factor objects, QueryVar is a query variable.
    Compute an elimination order given list of factors using the min fill heuristic. 
    Variables in the list will be derived from the scopes of the factors in Factors. 
    Order the list such that the first variable in the list generates the smallest
    factor upon elimination. The QueryVar must NOT part of the returned ordering list.
    @return a list of variables''' 
    ### YOUR CODE HERE ###



def VE(Net, QueryVar, EvidenceVars):
    
    """
    Input: Net---a BN object (a Bayes Net)
           QueryVar---a Variable object (the variable whose distribution
                      we want to compute)
           EvidenceVars---a LIST of Variable objects. Each of these
                          variables has had its evidence set to a particular
                          value from its domain using set_evidence.
     VE returns a distribution over the values of QueryVar, i.e., a list
     of numbers, one for every value in QueryVar's domain. These numbers
     sum to one, and the i'th number is the probability that QueryVar is
     equal to its i'th value given the setting of the evidence
     variables. For example if QueryVar = A with Dom[A] = ['a', 'b',
     'c'], EvidenceVars = [B, C], and we have previously called
     B.set_evidence(1) and C.set_evidence('c'), then VE would return a
     list of three numbers. E.g. [0.5, 0.24, 0.26]. These numbers would
     mean that Pr(A='a'|B=1, C='c') = 0.5 Pr(A='a'|B=1, C='c') = 0.24
     Pr(A='a'|B=1, C='c') = 0.26
     @return a list of probabilities, one for each item in the domain of the QueryVar
     """
    ### YOUR CODE HERE ###
    #print(Net.factors())
    #print(Net.variables())

    evar_dict = {}
    bn_factors = []
    hidden_vars = []
    for evar in EvidenceVars:
        evar_dict[evar] = evar.get_evidence()
        #print(evar.get_evidence())
    #print(evar_dict)
    new_rest_factors = []
    [bn_factors.append(factor) for factor in Net.factors()]
    [hidden_vars.append(var) for var in Net.variables() if var not in evar_dict]
    #print(bn_factors)

    for factor in bn_factors:
        for var in factor.get_scope():
            if var in evar_dict:
                factor = restrict_factor(factor, var, evar_dict[var])
                #print(factor.get_scope())

    for hv in hidden_vars:
        hv_factors = []
        for factor in bn_factors:
            if hv in factor.get_scope():
                hv_factors.append(factor)
        new_factor = multiply_factors(hv_factors)
        # new_factor = sum_out_variable(new_factor, hv)
        for factor in bn_factors:
            if hv in factor.get_scope():
                bn_factors.remove(factor)
        bn_factors.append(new_factor)

    final_product = multiply_factors(bn_factors)
    #print(final_product.print_table())

    fp_assignments = []
    for var in final_product.get_scope():
        fp_assignments.append(var.domain())

    fp_assignments = list(itertools.product(*fp_assignments))
    fp_assignments = [list(x) for x in fp_assignments]
    #print(fp_assignments)

    not_normalized = []
    for val in QueryVar.domain():
        temp = 0
        for x in fp_assignments:
            if val in x:
                temp += final_product.get_value(x)
        not_normalized.append(temp)

    #print(not_normalized)
    normalized = normalize(not_normalized)
    return normalized


def NaiveBayesModel():
    '''
   NaiveBayesModel returns a BN that is a Naive Bayes model that 
   represents the joint distribution of value assignments to 
   variables in the Adult Dataset from UCI.  Remember a Naive Bayes model
   assumes P(X1, X2,.... XN, Class) can be represented as 
   P(X1|Class)*P(X2|Class)* .... *P(XN|Class)*P(Class).
   When you generated your Bayes Net, assume that the values 
   in the SALARY column of the dataset are the CLASS that we want to predict.
   @return a BN that is a Naive Bayes model and which represents the Adult Dataset. 
    '''
    ### READ IN THE DATA
    input_data = []
    with open('data/adult-dataset.csv', newline='') as csvfile:
        reader = csv.reader(csvfile)
        headers = next(reader, None) #skip header row
        for row in reader:
            input_data.append(row)

    ### DOMAIN INFORMATION REFLECTS ORDER OF COLUMNS IN THE DATA SET
    variable_domains = {
    "Work": ['Not Working', 'Government', 'Private', 'Self-emp'],
    "Education": ['<Gr12', 'HS-Graduate', 'Associate', 'Professional', 'Bachelors', 'Masters', 'Doctorate'],    
    "Occupation": ['Admin', 'Military', 'Manual Labour', 'Office Labour', 'Service', 'Professional'],    
    "MaritalStatus": ['Not-Married', 'Married', 'Separated', 'Widowed'],
    "Relationship": ['Wife', 'Own-child', 'Husband', 'Not-in-family', 'Other-relative', 'Unmarried'],
    "Race": ['White', 'Black', 'Asian-Pac-Islander', 'Amer-Indian-Eskimo', 'Other'],
    "Gender": ['Male', 'Female'],
    "Country": ['North-America', 'South-America', 'Europe', 'Asia', 'Middle-East', 'Carribean'],
    "Salary": ['<50K', '>=50K']
    }
    ### YOUR CODE HERE ###


def Explore(Net, question):
    '''    Input: Net---a BN object (a Bayes Net)
           question---an integer indicating the question in HW4 to be calculated. Options are:
           1. What percentage of the women in the data set end up with a P(S=">=$50K"|E1) that is strictly greater than P(S=">=$50K"|E2)?
           2. What percentage of the men in the data set end up with a P(S=">=$50K"|E1) that is strictly greater than P(S=">=$50K"|E2)?
           3. What percentage of the women in the data set with P(S=">=$50K"|E1) > 0.5 actually have a salary over $50K?
           4. What percentage of the men in the data set with P(S=">=$50K"|E1) > 0.5 actually have a salary over $50K?
           5. What percentage of the women in the data set are assigned a P(Salary=">=$50K"|E1) > 0.5, overall?
           6. What percentage of the men in the data set are assigned a P(Salary=">=$50K"|E1) > 0.5, overall?
           @return a percentage (between 0 and 100)
    ''' 
    ### YOUR CODE HERE ###

