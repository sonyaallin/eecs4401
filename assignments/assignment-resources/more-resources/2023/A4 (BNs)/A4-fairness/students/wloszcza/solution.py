from bnetbase import Variable, Factor, BN
import csv
import itertools

def multiply_factors(Factors):
    '''Factors is a list of factor objects.
    Return a new factor that is the product of the factors in Factors.
    @return a factor''' 
    ### YOUR CODE HERE ###

    scope = []
    var_indexes = [[] for _ in range(len(Factors))]
    k = 0
    for factor in Factors:
        f_scope = factor.get_scope()
        for e in f_scope:
            if e not in scope:
                scope.append(e)
            var_indexes[k].append(scope.index(e))
        var_indexes[k].append(factor)
        k += 1

    f = Factor(str(scope), scope)

    domains = []
    for v in scope:
        domains.append(v.domain())

    combn = itertools.product(*domains)

    vals_list = []
    for c in combn:
        # Make list of lists that contain subset for Fi's scope.
        subsets = []
        for i in range(len(var_indexes)):
            subset = []
            for j in range(len(var_indexes[i])-1):
                subset.append(c[var_indexes[i][j]])
            subsets.append(subset)

        prod = 1
        i = 0
        for indexes in var_indexes:
            fact = indexes[len(indexes)-1]
            prod = prod * fact.get_value(subsets[i])
            i += 1
        vals = list(c)
        vals.append(prod)
        vals_list.append(vals)
    f.add_values(vals_list)

    return f

def restrict_factor(f, var, value):
    '''f is a factor, var is a Variable, and value is a value from var.domain.
    Return a new factor that is the restriction of f by this var = value.
    Don't change f! If f has only one variable its restriction yields a
    constant factor.
    @return a factor''' 
    ### YOUR CODE HERE ###

    var_index = f.get_scope().index(var)
    new_scope = f.get_scope()
    if var in new_scope:
        new_scope.remove(var)

    new_f = Factor(str(new_scope), new_scope)
    vals_list = []

    var_domain = var.domain()

    scope = f.get_scope()
    domains = []
    for v in scope:
        domains.append(v.domain())

    combn = itertools.product(*domains)
    d = {}

    for c in combn:
        if value in c:
            t = tuple([i for i in c if i not in var.domain()])

            val = f.get_value(list(c))
            d[t] = val

    for v in d:
        val = list(v)
        val.append(d[v])
        vals_list.append(val)

    new_f.add_values(vals_list)

    return new_f

def sum_out_variable(f, var):
    '''f is a factor, var is a Variable.
    Return a new factor that is the result of summing var out of f, by summing
    the function generated by the product over all values of var.
    @return a factor'''       
    ### YOUR CODE HERE ###

    var_index = f.get_scope().index(var)
    new_scope = f.get_scope()
    if var in new_scope:
        new_scope.remove(var)

    new_f = Factor(str(new_scope), new_scope)
    vals_list = []

    var_domain = var.domain()

    scope = f.get_scope()
    domains = []
    for v in scope:
        domains.append(v.domain())

    combn = itertools.product(*domains)
    d = {}

    for c in combn:
        t = tuple([i for i in c if i not in var.domain()])

        val = f.get_value(list(c))
        if t in d:
            d[t] += val
        else:
            d[t] = val

    for v in d:
        val = list(v)
        val.append(d[v])
        vals_list.append(val)

    new_f.add_values(vals_list)

    return new_f

def normalize(nums):
    '''num is a list of numbers. Return a new list of numbers where the new
    numbers sum to 1, i.e., normalize the input numbers.
    @return a normalized list of numbers'''
    ### YOUR CODE HERE ###
    s = sum(nums)
    new_nums = []
    for i in nums:
        new_nums.append(i/s)
    return new_nums


def min_fill_ordering(Factors, QueryVar):
    '''Factors is a list of factor objects, QueryVar is a query variable.
    Compute an elimination order given list of factors using the min fill heuristic. 
    Variables in the list will be derived from the scopes of the factors in Factors. 
    Order the list such that the first variable in the list generates the smallest
    factor upon elimination. The QueryVar must NOT part of the returned ordering list.
    @return a list of variables''' 
    ### YOUR CODE HERE ###

    variables = []
    for factor in Factors:
        for v in factor.get_scope():
            if v not in variables and v != QueryVar:
                variables.append(v)
    v_counts = []
    for v in variables:
        count = 0
        for factor in Factors:
            if v in factor.get_scope():
                count = count + 1
        v_counts.append((v, count))
    
    v_counts.sort(key=lambda x : x[1])

    ordered = []
    for v in v_counts:
        ordered.append(v[0])

    return ordered

def VE(Net, QueryVar, EvidenceVars):
    
    """
    Input: Net---a BN object (a Bayes Net)
           QueryVar---a Variable object (the variable whose distribution
                      we want to compute)
           EvidenceVars---a LIST of Variable objects. Each of these
                          variables has had its evidence set to a particular
                          value from its domain using set_evidence.
     VE returns a distribution over the values of QueryVar, i.e., a list
     of numbers, one for every value in QueryVar's domain. These numbers
     sum to one, and the i'th number is the probability that QueryVar is
     equal to its i'th value given the setting of the evidence
     variables. For example if QueryVar = A with Dom[A] = ['a', 'b',
     'c'], EvidenceVars = [B, C], and we have previously called
     B.set_evidence(1) and C.set_evidence('c'), then VE would return a
     list of three numbers. E.g. [0.5, 0.24, 0.26]. These numbers would
     mean that Pr(A='a'|B=1, C='c') = 0.5 Pr(A='a'|B=1, C='c') = 0.24
     Pr(A='a'|B=1, C='c') = 0.26
     @return a list of probabilities, one for each item in the domain of the QueryVar
     """
    ### YOUR CODE HERE ###
    probs = []

    # Step 1
    factors = Net.factors()
    new_factors = []
    for factor in factors:
        scope = factor.get_scope()
        replaced = False
        for evar in EvidenceVars:
            if evar in scope:
                # Replace with restriction restrict_factor(f, var, value):
                new_f = restrict_factor(factor, evar, evar.get_evidence())
                new_factors.append(new_f)
                replaced = True
                break

        if not replaced:
            new_factors.append(factor)

    # Step 2
    # Get remaining vars Z
    Z = []
    for factor in new_factors:
        scope = factor.get_scope()
        for v in scope:
            if v not in Z and v not in EvidenceVars:
                Z.append(v)
    
    G = []

    for j in range(len(Z)):
        f_prod = None
        for factor in new_factors:
            if Z[j] in factor.get_scope():
                if f_prod is not None:
                    f_prod = multiply_factors([f_prod, factor])
                else:
                    f_prod = factor
        g = sum_out_variable(f_prod, Z[j])
        G.append(g)

    newer_factors = []
    for j in range(len(Z)):
        for factor in new_factors:
            if Z[j] not in factor.get_scope() and factor not in newer_factors: # To remove. If using .remove() it could create loop issues
                newer_factors.append(factor)
        if G[j] not in newer_factors:
            newer_factors.append(G[j])

    # Step 3
    prod = multiply_factors(newer_factors)

    x = []
    for v in prod.get_scope():
        x.append(v.get_assignment())

    to_norm = []

    i = prod.get_scope().index(QueryVar)
    for a in QueryVar.domain():
        x[i] = a
        val = prod.get_value(x)
        to_norm.append(val)
    
    probs = normalize(to_norm)

    return probs


def NaiveBayesModel():
    '''
   NaiveBayesModel returns a BN that is a Naive Bayes model that 
   represents the joint distribution of value assignments to 
   variables in the Adult Dataset from UCI.  Remember a Naive Bayes model
   assumes P(X1, X2,.... XN, Class) can be represented as 
   P(X1|Class)*P(X2|Class)* .... *P(XN|Class)*P(Class).
   When you generated your Bayes Net, assume that the values 
   in the SALARY column of the dataset are the CLASS that we want to predict.
   @return a BN that is a Naive Bayes model and which represents the Adult Dataset. 
    '''
    ### READ IN THE DATA
    input_data = []
    with open('data/adult-dataset.csv', newline='') as csvfile:
        reader = csv.reader(csvfile)
        headers = next(reader, None) #skip header row
        for row in reader:
            input_data.append(row)

    ### DOMAIN INFORMATION REFLECTS ORDER OF COLUMNS IN THE DATA SET
    variable_domains = {
    "Work": ['Not Working', 'Government', 'Private', 'Self-emp'],
    "Education": ['<Gr12', 'HS-Graduate', 'Associate', 'Professional', 'Bachelors', 'Masters', 'Doctorate'],    
    "Occupation": ['Admin', 'Military', 'Manual Labour', 'Office Labour', 'Service', 'Professional'],    
    "MaritalStatus": ['Not-Married', 'Married', 'Separated', 'Widowed'],
    "Relationship": ['Wife', 'Own-child', 'Husband', 'Not-in-family', 'Other-relative', 'Unmarried'],
    "Race": ['White', 'Black', 'Asian-Pac-Islander', 'Amer-Indian-Eskimo', 'Other'],
    "Gender": ['Male', 'Female'],
    "Country": ['North-America', 'South-America', 'Europe', 'Asia', 'Middle-East', 'Carribean'],
    "Salary": ['<50K', '>=50K']
    }
    ### YOUR CODE HERE ###


def Explore(Net, question):
    '''    Input: Net---a BN object (a Bayes Net)
           question---an integer indicating the question in HW4 to be calculated. Options are:
           1. What percentage of the women in the data set end up with a P(S=">=$50K"|E1) that is strictly greater than P(S=">=$50K"|E2)?
           2. What percentage of the men in the data set end up with a P(S=">=$50K"|E1) that is strictly greater than P(S=">=$50K"|E2)?
           3. What percentage of the women in the data set with P(S=">=$50K"|E1) > 0.5 actually have a salary over $50K?
           4. What percentage of the men in the data set with P(S=">=$50K"|E1) > 0.5 actually have a salary over $50K?
           5. What percentage of the women in the data set are assigned a P(Salary=">=$50K"|E1) > 0.5, overall?
           6. What percentage of the men in the data set are assigned a P(Salary=">=$50K"|E1) > 0.5, overall?
           @return a percentage (between 0 and 100)
    ''' 
    ### YOUR CODE HERE ###

