# In this file, please write a short response (~250 words) to the following question:
# What is the most significant thing you learned from this exercise?
# You may want to reflect on steps you took to arrive at answers, issues you encountered, strategies you used to resolve issues, and questions that were generated by the exercise or that remain to be resolved.
# Note that this portion of the exercise is not graded for content, just completion! 
# This guide to reflective writing may help you get started: https://www.student.unsw.edu.au/reflective-writing

rushhour_goal_fn(): At first, I am a little confused about the parameter "state". I checked the first test of this function
on autograder.py. The input of this function is an item in the GOAL list. I tried to print out the type of the item in the list.
Then, I found that the item is Rushhour.rushhour(statespace). I started to find the useful method provided in this class. At last,
I found two method get_vehicle_statues() and get_board_properties() are useful. Based on the information provided in the docstring 
of these two functions, I completed the function.

heur_min_dist() and heur_alternate: After completing the heur_min_dist() function based on the docstring, I improved the heur_alternate
by checking the goal state in rushhour_goal_fn(). In other words, I've detailed the direction in this function. For example, if the exit 
direction is east or south, it is not complete until the tail of the goal vehicle arrives.

weighted_astar() and three fval_functions(): Based on the handout and some implements of test cases, I did not meet problems when I implement
these functions.

iterative_astar() and iterative_gbfs(): When I complete this function, I am confused about how the weight changes and how the costbound is enforced. After checking 
the handout, I update the costbound and try to test some weight changes during the iterations. I tried the weight = weight * (1/2) based on the
autograder.py until weight = weight*(1/10). I found the result of the test did not have significantly improve based on these changes. So, I tried
to use different fval_functions. But, the result remains the same. So, I decide to start the next function: iterative_gbfs. This is because we do
not use weight and fval_functions in this function. I want to find if there exists some other reasons which influence the results.

After completing the iterative_gbfs() based on the handout, I found the result is a little worse than the result of last function. I checked the
autograder.py and the marking schemes to see if these results are ok for the final marking. Then, I found that the iterative_gbfs() can improve much
more than iterative_astar(). So, I am start to thinking what influence the results. The weight and fval_functions are not the reason of that. So, I found
if I can improve the heur_alternate, maybe I can improve the results.

This is no accident. In writing these two functions, I find that heur_alternate solves many more problems. That's because it's much more precise. I began to wonder if 
there was room for improvement. After that, I thought of a lot of possibilities. The first thing that comes to mind is that in a real game, if there are a lot of cars between 
the target vehicle and the exit, we need to move them in order for the target vehicle to pass smoothly. However, this only applies to vehicles that are perpendicular to the direction 
of the target vehicle. Because in a real game, the car in the same direction as the target vehicle is always in front of the exit. Then I start overwriting heur_alternate. In the 
original version, I only consider the number of cars in different directions between the target vehicle and the exit. For example, for horizontal target vehicles, I only consider 
vertical target vehicles. But after a while, I found that it didn't solve the problem well. This is because the new heuristic functions perform worse when tested.

After that, I added in all directions and I also thought about multiple directions because the board is unbounded. After updating the new heuristic functions, both the iterative_gbfs 
and A* functions have been greatly improved. So, after more testing in different situations, I made the current code the final version.



