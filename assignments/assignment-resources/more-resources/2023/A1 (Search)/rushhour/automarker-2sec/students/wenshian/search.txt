# In this file, please write a short response (~250 words) to the following question:
# What is the most significant thing you learned from this exercise?
# You may want to reflect on steps you took to arrive at answers, issues you encountered, strategies you used to resolve issues, and questions that were generated by the exercise or that remain to be resolved.
# Note that this portion of the exercise is not graded for content, just completion! 
# This guide to reflective writing may help you get started: https://www.student.unsw.edu.au/reflective-writing

Note: Sorry if this response is a bit too long. I wanted to write down in detail the issue I encountered, my conclusion, and my question after "resolving" it for the assignment.

The biggest issue that I encountered during this assignment is when I was writing the alternative heuristics. One obvious flaw that the min_dist heuristics had was the fact that as long as a
part of the car could get to the goal, then it should return 0. This is obviously not the case, since there exists only 1 unique position for goal vehicles to be at in order to satisfy the goal condition.
Another point that the min_dist heuristics did not account for is the fact that there could be cars blocking on the route to the goal position. My current alternative heuristics account for the goal orientation, 
however it does not account for the existence of other cars that can block the route to goal. I initially attempted to loop through all vehicles once and record the vehicles that are in the way of a goal vehicle's
potential route to the goal and their minimum cost of moving out of the way assuming nothing is blocking it. I also made the assumption that any vehicles that haven't been seen on that iteration of the loop will be
treated as they are not there, in other words if a vehicle is blocking a goal vehicle's path but is at a later iteration compared to a goal vehicle, it counts as if it is not blocking the goal vehicle.
I realized that although this implementation method is still O(v) where v is the size of vehicle list, the additional computations that I add on influences some of the already solved problems to be become unsolved.
I spent most of my time trying to reduce the runtime of this implementation of heuristics function, but I couldn't accomplish it in the end and concluded that the specific method that I used to implement 
this idea might have been inefficient. From this experience I learned first hand that although a heuristics could be more rigorous than another heuristics, it doesn't mean that it'll lead to a faster problem 
solving rate, especially if it means that it'll take a lot more computational resources to calculate the heuristics itself. This left me wondering is there a way to find the balance between a rigorous heuristics
and a heuristics that takes shorter to calculate without going through trials and errors for each potential heuristics.
